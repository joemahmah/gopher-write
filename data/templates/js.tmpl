{{define "js"}}

<script language="javascript">

//
//Project
//
function SaveProject(){
		var xhr = new XMLHttpRequest();
		var url = "/project/save";
		xhr.open("POST", url, true);
		xhr.setRequestHeader("Content-Type", "text/plain");
		xhr.onreadystatechange = function () {
			//if server returns proper, update display
			if (this.readyState == 4 && this.status == 200){
				showResponse("Project saved.");
				setTimeout("hideResponse()",2000);
			}
		}
		
		xhr.send("");
}

//
//Utility Functions
//
function MakeForm(id){
	var form = document.createElement("form");
	form.id = id;
	
	var formContainer = document.getElementById("form_container");
	//TODO: create form container if needed
	
	var formControl = document.getElementById("form_control");
	//TODO: create controller if needed
	
	formContainer.insertBefore(form, formControl);
	
	return form;
}

function showResponse(text){
	var response = document.getElementById("response_text");
	
	if(response === null){
		response = document.createElement("div");
		response.id = "response_text";
		response.className = "response_text";
		document.body.appendChild(response);
	}
	
	response.innerHTML = text;
}

function hideResponse(){
	var response = document.getElementById("response_text");
	
	response.innerHTML = "";
}

function DeleteNodeById(id){
	var node = document.getElementById(id);
	node.parentNode.removeChild(node);
	delete node;
}

function ConsumeEnterKeyEvent(e){
	//if not given, set e to the event 
	var e = e || window.event;
	
	//get key code (or set to 0 if not existing)
	var key = e.charCode || e.keyCode || 0;
	
	//consume enter key event
	if(key == 13){
		e.preventDefault();
	}
}

//
//Common
//
function Name(PrimaryName, AlternateNames, IsAlias){
	this.PrimaryName = PrimaryName;
	this.AlternateNames = AlternateNames;
	this.IsAlias = IsAlias;
}

function MakeName(name, isAlias, alternateNames){
	var name = new Name(name, null, isAlias);

	if(alternateNames != null && alternateNames.length >= 1){
		name.AlternateNames = alternateNames;
	}
	return name;
}

function Age(BioAge, ChronoAge){
	this.BioAge = BioAge;
	this.ChronoAge = ChronoAge;
}

function MakeAge(bioAge, chronoAge){
	var age = new Age(bioAge, bioAge);
	
	if(typeof chronoAge !== "undefined"){
		age.ChronoAge = chronoAge;
	}
	
	return age;
}

function StatusToString(status){
	switch(status){
		case 0:
			return "Not Started";
		case 1:
			return "In Progress";
		case 2:
			return "Almost Done";
		case 3:
			return "Done";
		case 4:
			return "Unknown";
		default:
			return "Invalid Status";
	}
}

//
//Character
//
function Character(UID, Name, Description, Age, Aliases){
	this.UID = UID;
	this.Name = Name;
	this.Description = Description;
	this.Age = Age;
	this.Aliases = Aliases;
}

function MakeCharacter(name, description, age, aliases){
	var character = new Character(0, name, description, age, null);

	if(aliases != null && aliases.length >= 1){
		character.Aliases = aliases;
	}

	return character;

}

//
//Story
//
function Section(UID, Name, Text, Status){
	this.UID = UID;
	this.Name = Name;
	this.Text = Text;
	this.Status = Status;
}

function MakeSection(name, text, stat){
	return new Section(0, name, text, stat);
}

function Chapter(UID, Name, Sections, Status){
	this.UID = UID;
	this.Name = Name;
	this.Sections = Sections;
	this.Status = Status;
}

function MakeChapter(name, stat, sections){
	var chapter = new Chapter(0, name, null, stat);

	if(sections != null && sections.length >= 1){
		chapter.Sections = sections;
	}

	return chapter;
}

function Story(UID, Name, Chapters, Status){
	this.UID = UID;
	this.Name = Name;
	this.Chapters = Chapters;
	this.Status = Status;
}

function MakeStory(name, stat, chapters){
	var story = new Story(0, name, null, stat);

	if(chapters != null && chapters.length >= 1){
		story.Chapters = chapters;
	}

	return story;
}

//
//Location
//
function Location(UID, Name, Aliases, Description, Sublocations){
	this.UID = UID;
	this.Name = Name;
	this.Aliases = Aliases;
	this.Description = Description;
	this.Sublocations = Sublocations;
}

function MakeLocation(name, description, aliases, sublocations){
	var location = new Location(0, name, null, description, null);

	if(aliases != null && aliases.length >= 1){
		location.Aliases = aliases;
	}

	if(sublocations != null && sublocations.length >= 1){
		location.Sublocations = sublocations;
	}

	return location;
}

</script>

{{end}}
