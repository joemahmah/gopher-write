<html>

<head>
	<meta charset="utf-8">
	<title>View Chapter {{.Chapter.Name.PrimaryName}} | gopher-write</title>

	{{template "css"}}
</head>

<body>

{{template "js"}}

<script language="javascript">

var currentStoryUID = {{index .UIDS 0}};
var currentChapterUID = {{index .UIDS 1}};

var newStatus = null;
var noteChanged = false;
var nameChanged = false;

window.onload = initPage;

function initPage(){
	//Set the status
	var statusText = document.getElementById("status_text");
	statusText.value = {{.Chapter.Status}};
	
	//Update the section list
	updateSectionList();

	//Save changes every three seconds
	//User shouldn't be editing a lot, so catching their change as quick as possible is good.
	window.setInterval(saveChanges, 3000);
}

function processSection(){
	var name = MakeName(document.getElementById("section_new_name_input").value,false,null);
	var section = MakeSection(name,"",0);
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/new";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			showResponse("Section added.");
			setTimeout("hideResponse()",2000);
			updateSectionList(); //update Chapter list
			HideModal("section_new_modal"); //Hide the modal
			
			//Clear the name in the modal
			document.getElementById("section_new_name_input").value = "";
		} else if (this.readyState == 4 && this.status == 500) {
			showResponse("There was an error creating the new section.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send(JSON.stringify(section));

}

function removeSection(e){
	//Stop click from linking to page
	if(e.stopPropagation){
		e.stopPropagation();
	}

	//Abort if user does not confirm
	if(!window.confirm("Are you sure you want to delete this section? You will not be able to undo this action!")){
		return;
	}
	
	var uid = e.target.getAttribute("data-section-uid");
	var target = e.target;

	while(!uid){
		target = target.parentNode;
		uid = target.getAttribute("data-section-uid");
	}

	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + uid + "/delete";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function() {
		if(this.readyState === 4 && this.status === 200){
			showResponse("Section removed.");
			setTimeout("hideResponse()",2000);
			updateSectionList();
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("Unable to remove section.");
			setTimeout("hideResponse()",2000);
		}
	}
	xhr.send();
}

function exportSection(e){
	//Stop click from linking to page
	if(e.stopPropagation){
		e.stopPropagation();
	}
	var uid = e.target.getAttribute("data-section-uid");
	var target = e.target;

	while(!uid){
		target = target.parentNode;
		uid = target.getAttribute("data-section-uid");
	}

	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + uid + "/export";
	window.location = url;
}

function updateSectionList(){
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/list";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		//if server returns JSON, update display
		if (this.readyState === 4 && this.status === 200){
			//get the char list
			var sectionList = document.getElementById("section_list");
			
			//blank the existing list
			sectionList.innerHTML = "";
			
			//convert json into object
			var sectionListJSON = JSON.parse(this.responseText);
			
			if(sectionListJSON.Names != null) {
				//add the sections to the page
				for (var i = 0; i <= sectionListJSON.Names.length; i++){ 
					if(i === sectionListJSON.Names.length){
						var sectionElem = document.createElement("div");
						sectionElem.className = "list_elem list_elem_ghost";
						sectionElem.setAttribute("data-story-uid",currentStoryUID);
						sectionElem.setAttribute("data-chapter-uid",currentChapterUID);
						sectionElem.setAttribute("data-section-uid",i);
						sectionElem.setAttribute("draggable","false");
						sectionElem.addEventListener("drop",dropListElement);
						sectionElem.addEventListener("dragover",allowDragListElement);
						sectionElem.addEventListener("dragenter",changeSelectedElementBG);
						sectionElem.addEventListener("dragleave",clearSelectedElementBG);
						
						sectionList.appendChild(sectionElem);
					} else {
						var sectionElem = document.createElement("div");
						sectionElem.classList.add("list_elem");
						sectionElem.classList.add("list_elem_color");
						sectionElem.setAttribute("data-story-uid",currentStoryUID);
						sectionElem.setAttribute("data-chapter-uid",currentChapterUID);
						sectionElem.setAttribute("data-section-uid",sectionListJSON.UIDS[i]);
						sectionElem.setAttribute("draggable","true");
						sectionElem.addEventListener("drop",dropListElement);
						sectionElem.addEventListener("dragover",allowDragListElement);
						sectionElem.addEventListener("dragstart",dragListElement);
						sectionElem.addEventListener("dblclick",linkListElement);
						sectionElem.addEventListener("dragenter",changeSelectedElementBG);
						sectionElem.addEventListener("dragleave",clearSelectedElementBG);
						
						var sectionElemName = document.createElement("span");
						sectionElemName.innerHTML = sectionListJSON.Names[i];
						
						//Control buttons
						var sectionElemControl = document.createElement("div");
						sectionElemControl.classList.add("list_elem_btn_wrap");
						
						var sectionElemRemove = document.createElement("span");
						sectionElemRemove.classList.add("list_elem_btn");
						sectionElemRemove.classList.add("list_elem_btn_red");
						sectionElemRemove.innerHTML = "X";
						sectionElemRemove.addEventListener("dblclick", removeSection);
						
						var sectionElemExport = document.createElement("span");
						sectionElemExport.classList.add("list_elem_btn");
						sectionElemExport.innerHTML = "⎘";
						sectionElemExport.addEventListener("dblclick", exportSection);
						
						sectionElemControl.appendChild(sectionElemExport);
						sectionElemControl.appendChild(sectionElemRemove);
						
						//Add to section elem
						sectionElem.appendChild(sectionElemName);
						sectionElem.appendChild(sectionElemControl)
						
						sectionList.appendChild(sectionElem);
					}
				}
			}
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error loading the section list. Status: " + this.status);
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
	
}

function setStatus(){
	var statusText = document.getElementById("status_text");
	statusText.value = chapStatus;
}


function saveChanges(){
	
	//Update status if needed
	if(newStatus !== null){
		updateStatus(newStatus);
	}
	
	//Update note if needed.
	if(noteChanged){
		updateNote()
	}
	
	//Update name if needed.
	if(nameChanged){
		updateName()
	}
}

function moveSection(first, second){var xhr = new XMLHttpRequest();
	//save to prevent data loss.
	saveChanges();

	var url = "/move/section/intra/" + currentStoryUID + "/" + currentChapterUID + "/" + first + "/" + second;
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		if (this.readyState === 4 && this.status === 200){
			updateSectionList();
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error moving the section.");
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

function linkListElement(e){
	var suid = e.target.getAttribute("data-story-uid");
	var cuid = e.target.getAttribute("data-chapter-uid");
	var seuid = e.target.getAttribute("data-section-uid");
	var target = e.target;
	
	//get info from ancestors if needed
	while(!suid){
		target = target.parentNode;
		suid = target.getAttribute("data-story-uid");
		cuid = target.getAttribute("data-chapter-uid");
		seuid = target.getAttribute("data-section-uid");
	}
	
	location.href = "/story/" + suid + "/" + cuid + "/" + seuid;
}

function dropListElement(e){
	e.preventDefault();
	
	if(e.stopPropagation !== "undefined"){
		e.stopPropagation();
	}
	
	e.target.style.background="none";
	
	var firstID = parseInt(e.dataTransfer.getData("text"));
	var secondID = parseInt(e.target.getAttribute("data-section-uid"));
	
	var target = e.target;
	
	while(isNaN(secondID)){
		target = target.parentNode
		secondID = parseInt(target.getAttribute("data-section-uid"));
	}
	
	if(firstID !== secondID){
		moveSection(firstID, secondID);
	}
}

function dragListElement(e){
	var storyUID = e.target.getAttribute("data-section-uid");
	
	var target = e.target;
	
	while(storyUID === null){
		target = target.parentNode
		storyUID = parseInt(target.getAttribute("data-section-uid"));
	}
	
	e.dataTransfer.setData("text", storyUID);
}

function allowDragListElement(e){
	e.preventDefault();
}

function changeSelectedElementBG(e){
	e.preventDefault();
	e.target.style.background="#DDEEDD";
}

function clearSelectedElementBG(e){
	e.preventDefault();
	e.target.style.background="transparent";
}

function procUpdateStatus(){

	var stat = parseInt(document.getElementById("status_text").value);

	updateStatus(stat);
}

function toggleNoteVisability(){
	if(document.getElementById("note_wrap").style.display == "block"){
		document.getElementById("note_wrap").style.display = "none";
		document.getElementById("note_header_arrow").innerHTML = "▼";
	} else {
		document.getElementById("note_wrap").style.display = "block";
		document.getElementById("note_header_arrow").innerHTML = "▲";
	}
}

////////////////////////////
// Actual Update Handlers //
////////////////////////////

function updateStatus(stat){

	//Try to add remote
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/edit/status/" + stat;
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "text/plain");
	xhr.onreadystatechange = function () {
		if (this.readyState == 4 && this.status === 200){
			newStatus = null; //unflag to be updated (if flagged)
			showResponse("Status updated.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			//If unable to add
			newStatus = stat; //Flag to try again on next save
			showResponse("Unable to update status. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send();
}

function updateNote() {
	var text = document.getElementById("note_textarea").value;
	var textobj = {Data: text};
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/edit/note";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			noteChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			noteChanged = true; //
			showResponse("Unable to save note. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send(JSON.stringify(textobj));
}

function updateName(){
	var name = MakeName(document.getElementById("name_text").value,false,null);
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/edit/name";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			nameChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			nameChanged = true; //
			showResponse("Unable to save name. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send(JSON.stringify(name));
}

function importSection(){
	var files = document.getElementById("section_import_input").files;
	var bindchar = document.getElementById("section_import_bindchar_input").checked;
	var bindloc = document.getElementById("section_import_bindloc_input").checked;
	
	//check if one file uploaded
	if(files.length !== 1){
		showResponse("Select a single file to import.");
		setTimeout("hideResponse()",5000);
		return;
	}
	
	//get the file
	file = files[0];
	
	//Make a file reader
	var fileReader = new FileReader();
	
	//Make the request
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/import/" + bindchar + "/" + bindloc;
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if (this.readyState == 4 && this.status == 200){
			showResponse("Section imported.");
			setTimeout("hideResponse()",2000);
			HideModal("section_import_modal"); //Hide the modal
			updateSectionList(); //Update the section list
		} else if (this.readyState == 4 && this.status !== 200) {
			showResponse("Unable to import section.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	//Set the filereader to send the file
	fileReader.onload = function(e){
		xhr.send(e.target.result);
	}
	
	//Read the file
	fileReader.readAsBinaryString(file)
}

</script>

{{template "header"}}


<input class="name" id="name_text" type="text" onkeypress="nameChanged=true; ConsumeEnterKeyEvent(event, saveChanges);" value="{{.Chapter.Name.PrimaryName}}">

<div class="meta_control">
	<a href="/story/{{index .UIDS 0}}">Return to story</a>
</div>

<div class="status_wrap" id="status_wrap">
	<span class="status_label" >Status: </span>
	<select class="status_text" id="status_text" onchange="procUpdateStatus();" >
		<option value="0">Not Started</option>
		<option value="1">In Progress</option>
		<option value="2">Almost Done</option>
		<option value="3">Done</option>
		<option value="4">Unknown</option>
	</select>
</div>

<div class="note_wrap">
	<div class="note_header" onclick="toggleNoteVisability()">
		Notes 
		<span class="meta_tiny" id="note_header_arrow">▼</span>
	</div>
	<div class="text_wrap meta_hidden" id="note_wrap">
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
		<textarea id="note_textarea" onchange="noteChanged=true;">{{.Chapter.Note}}</textarea>
	</div>
</div>

<hr>
<h2>Sections</h2>

<div class="control_wrap">
	<span class="form_make_button" onclick='DisplayModal("section_new_modal");'>Add Section</span>
	<span class="form_make_button" onclick='DisplayModal("section_import_modal")'>Import Section</span>
</div>

<div class="list" id="section_list">

</div>


<div class="ui_modal" id="section_new_modal">
<div class="ui_modal_content">
	<div class="ui_modal_form">
		<label>Section Name: </label>
		<input id="section_new_name_input" type="text" onkeypress="ConsumeEnterKeyEvent(event);">
	</div>
	<br>
	<div class="ui_modal_control">
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick="processSection();">Create Section</span>
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='HideModal("section_new_modal");'>Close</span>
	</div>
</div>
</div>

<div class="ui_modal" id="section_import_modal">
<div class="ui_modal_content">
	<div class="ui_modal_form">
		<input id="section_import_input" type="file" multiple="false">
		<br>
		<label title="Binding characters will keep the section's characters. This will only work correctly if the section being imported is from the current project.">Bind Characters: </label>
		<input class="ui_modal_form_checkbox" id="section_import_bindchar_input" type="checkbox">
		<label title="Binding locations will keep the section's locations. This will only work correctly if the section being imported is from the current project.">Bind Locations: </label>
		<input class="ui_modal_form_checkbox" id="section_import_bindloc_input" type="checkbox">
	</div>
	<br>
	<div class="ui_modal_control">
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick="importSection();">Import Section</span>
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='HideModal("section_import_modal");'>Close</span>
	</div>
</div>
</div>

{{template "footer"}}

</body>

</html>
