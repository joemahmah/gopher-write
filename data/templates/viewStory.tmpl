<html>

<head>
	<meta charset="utf-8">
	<title>View Story {{.Name.PrimaryName}} | gopher-write</title>

	{{template "css"}}
</head>

<body>

{{template "js"}}

<script language="javascript">

var currentStoryUID = {{.UID}};
var chapStatus = {{.Status}};

var changes = false;

window.onload = initPage;

function initPage(){
	//Set the chapter status
	setStatus();
	
	//Update the section list
	updateChapterList();

	//Save changes every second
	//User shouldn't be editing a lot, so catching their change as quick as possible is good.
	window.setInterval(saveChanges, 1000);
}

function addChapterForm(){

	var form = document.getElementById("chapter_form");
	
	if(form == null){
		form = MakeForm("chapter_form");
	}
	
	form.innerHTML=form.innerHTML + "Name:<br><input id=\"form_name\" type=\"text\" onkeypress=\"ConsumeEnterKeyEvent();\"><br>";
	
	document.getElementById("form_new").style.display = 'none'
	document.getElementById("form_control").style.display = 'block'
}

function removeChapterForm(){
	DeleteNodeById("chapter_form");
	
	document.getElementById("form_new").style.display = 'block'
	document.getElementById("form_control").style.display = 'none'
}
function processChapter(){
	var name = MakeName(document.getElementById("form_name").value,false,null);
	var story = MakeChapter(name,0,null);
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/new";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			removeChapterForm(); //remove form
			updateChapterList(); //update Chapter list
		} else if (this.readyState == 4 && this.status == 500) {
			showResponse("There was an error adding the chapter.");
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send(JSON.stringify(story));
}

function updateChapterList(){
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/list";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		//if server returns JSON, update display
		if (this.readyState === 4 && this.status === 200){
			//get the char list
			var storyList = document.getElementById("chapter_list");
			
			//blank the existing list
			storyList.innerHTML = "";
			
			//convert json into object
			var storyListJSON = JSON.parse(this.responseText);
			
			if(storyListJSON.Names != null) {
				//add the chapters to the page
				for (var i = 0; i <= storyListJSON.Names.length; i++) {
					if(i === storyListJSON.Names.length){
						var storyElem = document.createElement("div");
						storyElem.className = "list_elem list_elem_ghost";
						storyElem.setAttribute("data-story-uid",currentStoryUID);
						storyElem.setAttribute("data-chapter-uid",i);
						storyElem.setAttribute("draggable","false");
						storyElem.addEventListener("drop",dropListElement);
						storyElem.addEventListener("dragover",allowDragListElement);
						
						document.getElementById("chapter_list").appendChild(storyElem);
					} else {
						var storyElem = document.createElement("div");
						storyElem.className = "list_elem";
						storyElem.setAttribute("data-story-uid",currentStoryUID);
						storyElem.setAttribute("data-chapter-uid",storyListJSON.UIDS[i]);
						storyElem.setAttribute("draggable","true");
						storyElem.addEventListener("drop",dropListElement);
						storyElem.addEventListener("dragover",allowDragListElement);
						storyElem.addEventListener("dragstart",dragListElement);
						storyElem.addEventListener("dblclick",linkListElement);
						
						var storyElemLink = document.createElement("span");
						storyElem.setAttribute("draggable","true");
						storyElemLink.innerHTML = storyListJSON.Names[i];
						
						storyElem.appendChild(storyElemLink);
						
						document.getElementById("chapter_list").appendChild(storyElem);
					}
				}
			}
			
		}
	}
	
	xhr.send();
}

function setStatus(){
	var statusText = document.getElementById("status_text");
	statusText.value = chapStatus;
}

function saveChanges(){
	//Only save changes if there is actually something to save.
	if(changes === true){
		//reset change chapter status
		changes = false;
		
		//Get and create the name
		var name = MakeName(document.getElementById("name_text").innerHTML,false,null);
		//Create a chapter object with the new status and/or name
		var chapter = MakeStory(name,parseInt(document.getElementById("status_text").value),null);
		
		var xhr = new XMLHttpRequest();
		var url = "/story/" + currentStoryUID + "/edit";
		xhr.open("POST", url, true);
		xhr.setRequestHeader("Content-Type", "application/json");
		xhr.onreadystatechange = function () {
			//if server returns proper, update display
			if (this.readyState == 4 && this.status == 200){
				showResponse("Story updated.");
				setTimeout("hideResponse()",2000);
			} else if (this.readyState == 4 && this.status == 500) {
				showResponse("Unable to update.");
				setTimeout("hideResponse()",2000);
			}
		}
		
		xhr.send(JSON.stringify(chapter));
		
	}
}


function moveStory(first, second){var xhr = new XMLHttpRequest();
	//save to prevent data loss.
	saveChanges();

	var url = "/move/chapter/intra/" + currentStoryUID + "/" + first + "/" + second;
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		if (this.readyState === 4 && this.status === 200){
			updateChapterList();
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error moving the chapter.");
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

function linkListElement(e){
	var suid = e.target.getAttribute("data-story-uid");
	var cuid = e.target.getAttribute("data-chapter-uid");
	location.href = "/story/" + suid + "/" + cuid;
}

function dropListElement(e){
	e.preventDefault();
	
	if(e.stopPropagation !== "undefined"){
		e.stopPropagation();
	}
	
	var firstID = parseInt(e.dataTransfer.getData("text"));
	var secondID = parseInt(e.target.getAttribute("data-chapter-uid"));
	
	var target = e.target;
	
	while(isNaN(secondID)){
		target = target.parentNode
		secondID = parseInt(target.getAttribute("data-chapter-uid"));
	}
	
	if(firstID !== secondID){
		moveStory(firstID, secondID);
	}
}

function dragListElement(e){
	var storyUID = e.target.getAttribute("data-chapter-uid");
	
	var target = e.target;
	
	while(storyUID === null){
		target = target.parentNode
		storyUID = parseInt(target.getAttribute("data-chapter-uid"));
	}
	
	e.dataTransfer.setData("text", storyUID);
}

function allowDragListElement(e){
	e.preventDefault();
}

</script>

{{template "header"}}

<h1 id="name_text">{{.Name.PrimaryName}}</h1>

<div class="meta_control">
	<a href="/story">Return to story list</a>
</div>

<div class="status_wrap" id="status_wrap">
	<span class="status_label" >Status: </span>
	<select class="status_text" id="status_text" onchange="changes=true;" >
		<option value="0">Not Started</option>
		<option value="1">In Progress</option>
		<option value="2">Almost Done</option>
		<option value="3">Done</option>
		<option value="4">Unknown</option>
	</select>
</div>

<hr>
<h2>Chapters</h2>

<div class="form_container" id="form_container">
	<div id="form_new">
		<button type="button" onclick="addChapterForm()">Add Chapter</button>
	</div>
	<div id="form_control" style="display:none">
		<button onclick="processChapter()">Submit</button>
	</div>
</div>

<div class="list" id="chapter_list">

</div>

</body>

</html>
