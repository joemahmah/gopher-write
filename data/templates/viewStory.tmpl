<html>

<head>
	<meta charset="utf-8">
	<title>View Story {{.Name.PrimaryName}} | gopher-write</title>

	{{template "css"}}
</head>

<body>

{{template "js"}}

<script language="javascript">

var currentStoryUID = {{.UID}};
var chapStatus = {{.Status}};

var changes = false;

window.onload = initPage;

function initPage(){
	//Set the chapter status
	setStatus();
	
	//Update the section list
	updateChapterList();

	//Save changes every second
	//User shouldn't be editing a lot, so catching their change as quick as possible is good.
	window.setInterval(saveChanges, 1000);
}

function processChapter(){
	var name = MakeName(document.getElementById("chapter_new_name_input").value,false,null);
	var story = MakeChapter(name,0,null);
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/new";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			showResponse("Section added.");
			setTimeout("hideResponse()",2000);
			updateChapterList(); //update Chapter list
			HideModal("chapter_new_modal"); //Hide the modal
			
			//Clear the name in the modal
			document.getElementById("chapter_new_name_input").value = "";
		} else if (this.readyState == 4 && this.status == 500) {
			showResponse("There was an error adding the chapter.");
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send(JSON.stringify(story));
}

function updateChapterList(){
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/list";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		//if server returns JSON, update display
		if (this.readyState === 4 && this.status === 200){
			//get the char list
			var chapterList = document.getElementById("chapter_list");
			
			//blank the existing list
			chapterList.innerHTML = "";
			
			//convert json into object
			var chapterListJSON = JSON.parse(this.responseText);
			
			if(chapterListJSON.Names != null) {
				//add the chapters to the page
				for (var i = 0; i <= chapterListJSON.Names.length; i++) {
					if(i === chapterListJSON.Names.length){
						var chapterElem = document.createElement("div");
						chapterElem.className = "list_elem list_elem_ghost";
						chapterElem.setAttribute("data-story-uid",currentStoryUID);
						chapterElem.setAttribute("data-chapter-uid",i);
						chapterElem.setAttribute("draggable","false");
						chapterElem.addEventListener("drop",dropListElement);
						chapterElem.addEventListener("dragover",allowDragListElement);
						chapterElem.addEventListener("dragenter",changeSelectedElementBG);
						chapterElem.addEventListener("dragleave",clearSelectedElementBG);
						
						document.getElementById("chapter_list").appendChild(chapterElem);
					} else {
						var chapterElem = document.createElement("div");
						chapterElem.className = "list_elem list_elem_color";
						chapterElem.setAttribute("data-story-uid",currentStoryUID);
						chapterElem.setAttribute("data-chapter-uid",chapterListJSON.UIDS[i]);
						chapterElem.setAttribute("draggable","true");
						chapterElem.addEventListener("drop",dropListElement);
						chapterElem.addEventListener("dragover",allowDragListElement);
						chapterElem.addEventListener("dragstart",dragListElement);
						chapterElem.addEventListener("dblclick",linkListElement);
						chapterElem.addEventListener("dragenter",changeSelectedElementBG);
						chapterElem.addEventListener("dragleave",clearSelectedElementBG);
						
						var chapterElemName = document.createElement("span");
						chapterElemName.innerHTML = chapterListJSON.Names[i];
						
						//Control buttons
						var chapterElemControl = document.createElement("div");
						chapterElemControl.classList.add("list_elem_btn_wrap");
						
						var chapterElemRemove = document.createElement("span");
						chapterElemRemove.classList.add("list_elem_btn");
						chapterElemRemove.classList.add("list_elem_btn_red");
						chapterElemRemove.innerHTML = "X";
						chapterElemRemove.addEventListener("dblclick", removeChapter);
						
						var chapterElemExport = document.createElement("span");
						chapterElemExport.classList.add("list_elem_btn");
						chapterElemExport.innerHTML = "âŽ˜";
						chapterElemExport.addEventListener("dblclick", exportChapter);
						
						chapterElemControl.appendChild(chapterElemExport);
						chapterElemControl.appendChild(chapterElemRemove);
						
						//Add to section elem
						chapterElem.appendChild(chapterElemName);
						chapterElem.appendChild(chapterElemControl)
						
						chapterList.appendChild(chapterElem);
					}
				}
			}
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error loading the chapter list. Status: " + this.status);
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

//Have ConsumeEnterKeyEvent hook this function
//to allow enter to save changes.
function NewEnterKeyEvent(){
	saveChanges();
}

function setStatus(){
	var statusText = document.getElementById("status_text");
	statusText.value = chapStatus;
}

function saveChanges(){
	//Only save changes if there is actually something to save.
	if(changes === true){
		//reset change chapter status
		changes = false;
		
		//Get and create the name
		var name = MakeName(document.getElementById("name_text").innerHTML,false,null);
		//Create a chapter object with the new status and/or name
		var chapter = MakeStory(name,parseInt(document.getElementById("status_text").value),null);
		
		var xhr = new XMLHttpRequest();
		var url = "/story/" + currentStoryUID + "/edit";
		xhr.open("POST", url, true);
		xhr.setRequestHeader("Content-Type", "application/json");
		xhr.onreadystatechange = function () {
			//if server returns proper, update display
			if (this.readyState == 4 && this.status == 200){
				showResponse("Story updated.");
				setTimeout("hideResponse()",2000);
			} else if (this.readyState == 4 && this.status == 500) {
				showResponse("Unable to update.");
				setTimeout("hideResponse()",2000);
			}
		}
		
		xhr.send(JSON.stringify(chapter));
		
	}
}

function moveStory(first, second){var xhr = new XMLHttpRequest();
	//save to prevent data loss.
	saveChanges();

	var url = "/move/chapter/intra/" + currentStoryUID + "/" + first + "/" + second;
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		if (this.readyState === 4 && this.status === 200){
			updateChapterList();
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error moving the chapter.");
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

function removeChapter(e){

	//Prevent double click from linking
	if(e.stopPropagation){
		e.stopPropagation();
	}

	//Abort if user does not confirm
	if(!window.confirm("Are you sure you want to delete this chapter? All sections contained within will be deleted. You will not be able to undo this action!")){
		return;
	}
	
	var uid = e.target.getAttribute("data-chapter-uid");
	var target = e.target;

	while(!uid){
		target = target.parentNode;
		uid = target.getAttribute("data-chapter-uid");
	}

	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + uid + "/delete";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function() {
		if(this.readyState === 4 && this.status === 200){
			showResponse("Chapter removed.");
			setTimeout("hideResponse()",2000);
			updateChapterList();
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("Unable to remove chapter.");
			setTimeout("hideResponse()",2000);
		}
	}
	xhr.send();
}

function exportChapter(e){

	//Prevent double click from linking
	if(e.stopPropagation){
		e.stopPropagation();
	}
	
	var uid = e.target.getAttribute("data-chapter-uid");
	var target = e.target;

	while(!uid){
		target = target.parentNode;
		uid = target.getAttribute("data-chapter-uid");
	}

	var url = "/story/" + currentStoryUID + "/" + uid + "/export";
	window.location = url;
}

function linkListElement(e){
	var suid = e.target.getAttribute("data-story-uid");
	var cuid = e.target.getAttribute("data-chapter-uid");
	var target = e.target;
	
	//get info from ancestors if needed
	while(!suid){
		target = target.parentNode;
		suid = target.getAttribute("data-story-uid");
		cuid = target.getAttribute("data-chapter-uid");
	}
	
	location.href = "/story/" + suid + "/" + cuid;
}

function dropListElement(e){
	e.preventDefault();
	
	if(e.stopPropagation !== "undefined"){
		e.stopPropagation();
	}
	
	e.target.style.background="none";
	
	var firstID = parseInt(e.dataTransfer.getData("text"));
	var secondID = parseInt(e.target.getAttribute("data-chapter-uid"));
	
	var target = e.target;
	
	while(isNaN(secondID)){
		target = target.parentNode
		secondID = parseInt(target.getAttribute("data-chapter-uid"));
	}
	
	if(firstID !== secondID){
		moveStory(firstID, secondID);
	}
}

function dragListElement(e){
	var storyUID = e.target.getAttribute("data-chapter-uid");
	
	var target = e.target;
	
	while(storyUID === null){
		target = target.parentNode
		storyUID = parseInt(target.getAttribute("data-chapter-uid"));
	}
	
	e.dataTransfer.setData("text", storyUID);
}

function allowDragListElement(e){
	e.preventDefault();
}

function changeSelectedElementBG(e){
	e.preventDefault();
	e.target.style.background="#DDEEDD";
}

function clearSelectedElementBG(e){
	e.preventDefault();
	e.target.style.background="transparent";
}

function importChapter(){
	var files = document.getElementById("chapter_import_input").files;
	var bindchar = document.getElementById("chapter_import_bindchar_input").checked;
	var bindloc = document.getElementById("chapter_import_bindloc_input").checked;
	
	//check if one file uploaded
	if(files.length !== 1){
		showResponse("Select a single file to import.");
		setTimeout("hideResponse()",5000);
		return;
	}
	
	//get the file
	file = files[0];
	
	//Make a file reader
	var fileReader = new FileReader();
	
	//Make the request
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/import/" + bindchar + "/" + bindloc;
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if (this.readyState == 4 && this.status == 200){
			showResponse("Chapter imported.");
			setTimeout("hideResponse()",2000);
			HideModal("chapter_import_modal"); //Hide the modal
			updateChapterList(); //Update the chapter list
		} else if (this.readyState == 4 && this.status !== 200) {
			showResponse("Unable to import chapter.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	//Set the filereader to send the file
	fileReader.onload = function(e){
		xhr.send(e.target.result);
	}
	
	//Read the file
	fileReader.readAsBinaryString(file)
}

</script>

{{template "header"}}

<h1 id="name_text">{{.Name.PrimaryName}}</h1>

<div class="meta_control">
	<a href="/story">Return to story list</a>
</div>

<div class="status_wrap" id="status_wrap">
	<span class="status_label" >Status: </span>
	<select class="status_text" id="status_text" onchange="changes=true;" >
		<option value="0">Not Started</option>
		<option value="1">In Progress</option>
		<option value="2">Almost Done</option>
		<option value="3">Done</option>
		<option value="4">Unknown</option>
	</select>
</div>

<hr>
<h2>Chapter</h2>

<div class="control_wrap">
	<span class="form_make_button" onclick='DisplayModal("chapter_new_modal");'>Add Chapter</span>
	<span class="form_make_button" onclick='DisplayModal("chapter_import_modal")'>Import Chapter</span>
</div>

<div class="list" id="chapter_list">

</div>


<div class="ui_modal" id="chapter_new_modal">
<div class="ui_modal_content">
	<div class="ui_modal_form">
		<label>Chapter Name: </label>
		<input id="chapter_new_name_input" type="text" onkeypress="ConsumeEnterKeyEvent(event, processChapter);">
	</div>
	<br>
	<div class="ui_modal_control">
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick="processChapter();">Create Chapter</span>
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='HideModal("chapter_new_modal");'>Close</span>
	</div>
</div>
</div>

<div class="ui_modal" id="chapter_import_modal">
<div class="ui_modal_content">
	<div class="ui_modal_form">
		<input id="chapter_import_input" type="file" multiple="false">
		<br>
		<label title="Binding characters will keep the section's characters. This will only work correctly if the section being imported is from the current project.">Bind Characters: </label>
		<input class="ui_modal_form_checkbox" id="chapter_import_bindchar_input" type="checkbox">
		<label title="Binding locations will keep the section's locations. This will only work correctly if the section being imported is from the current project.">Bind Locations: </label>
		<input class="ui_modal_form_checkbox" id="chapter_import_bindloc_input" type="checkbox">
	</div>
	<br>
	<div class="ui_modal_control">
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick="importChapter();">Import Chapter</span>
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='HideModal("chapter_import_modal");'>Close</span>
	</div>
</div>
</div>

</body>

</html>
