<html>

<head>
	<meta charset="utf-8">
	<title>Story List | gopher-write</title>
	
	{{template "css"}}
</head>

<body>

{{template "js"}}

<script language="javascript">

//The current move mode
var mode = 1; //1=chapter, 2=section

//Set story list to update on load
window.onload = init;

function init(){
		updateStorySelect();
}

function updateStorySelect(){
	var selectA = document.getElementById("list_a_story");
	var selectB = document.getElementById("list_b_story");
	
	//remove all stories from the select boxes
	//except for the first option (-1).
	//note: select A,B should have same options
	for( var i = selectA.options.length - 1; i > 0; i--){
		selectA.remove(i);
		selectB.remove(i);
	}
	
	var xhr = new XMLHttpRequest();
	var url = "/story/list";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		if (this.readyState === 4 && this.status === 200){
			var storyListJSON = JSON.parse(this.responseText);
			
			if(storyListJSON.Names != null) {
				for (var i = 0; i < storyListJSON.Names.length; i++) {
					var newOption = document.createElement("option")
					newOption.innerHTML = storyListJSON.Names[i];
					newOption.value = storyListJSON.UIDS[i];
					
					selectA.appendChild(newOption);
					selectB.appendChild(newOption.cloneNode(true));
				}
			}
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error loading the story list. Status: " + this.status);
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

function updateStoryList(){
	var xhr = new XMLHttpRequest();
	var url = "/story/list";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		//if server returns JSON, update display
		if (this.readyState === 4 && this.status === 200){
			//get the char list
			var storyList = document.getElementById("story_list");
			
			//convert json into object
			var storyListJSON = JSON.parse(this.responseText);
			
			if(storyListJSON.Names != null) {
				storyList.innerHTML = "";
			
				//add the stories to the page
				for (var i = 0; i <= storyListJSON.Names.length; i++) {
					if(i === storyListJSON.Names.length){
						var storyElem = document.createElement("div");
						storyElem.className = "list_elem list_elem_ghost";
						storyElem.setAttribute("data-story-uid",i);
						storyElem.setAttribute("draggable","false");
						storyElem.addEventListener("drop",dropListElement);
						storyElem.addEventListener("dragover",allowDragListElement);
						
						document.getElementById("story_list").appendChild(storyElem);
					} else {
						var storyElem = document.createElement("div");
						storyElem.className = "list_elem list_elem_color";
						storyElem.setAttribute("data-story-uid",storyListJSON.UIDS[i]);
						storyElem.setAttribute("draggable","true");
						storyElem.addEventListener("drop",dropListElement);
						storyElem.addEventListener("dragover",allowDragListElement);
						storyElem.addEventListener("dragstart",dragListElement);
						storyElem.addEventListener("dblclick",linkListElement);
						
						var storyElemName = document.createElement("span");
						storyElemName.innerHTML = storyListJSON.Names[i];
						
						//Control buttons
						var storyElemControl = document.createElement("div");
						storyElemControl.classList.add("list_elem_btn_wrap");
						
						var storyElemRemove = document.createElement("span");
						storyElemRemove.classList.add("list_elem_btn");
						storyElemRemove.classList.add("list_elem_btn_red");
						storyElemRemove.innerHTML = "X";
						storyElemRemove.addEventListener("dblclick", removeStory);
						
						var storyElemExport = document.createElement("span");
						storyElemExport.classList.add("list_elem_btn");
						storyElemExport.innerHTML = "âŽ˜";
						storyElemExport.addEventListener("dblclick", exportStory);
						
						storyElemControl.appendChild(storyElemExport);
						
						storyElemControl.appendChild(storyElemRemove);
						
						//Add to story elem
						storyElem.appendChild(storyElemName);
						storyElem.appendChild(storyElemControl)
						
						storyList.appendChild(storyElem);
					}
				}
			}
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error loading the story list. Status: " + this.status);
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

function moveStory(first, second){var xhr = new XMLHttpRequest();
	var url = "/move/story/" + first + "/" + second;
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		if (this.readyState === 4 && this.status === 200){
			updateStoryList();
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error moving the story.");
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

function removeStory(e){
	//Stop click from linking to page
	if(e.stopPropagation){
		e.stopPropagation();
	}

	//Abort if user does not confirm
	if(!window.confirm("Are you sure you want to delete this story? All chapters and sections contained within will be deleted. You will not be able to undo this action!")){
		return;
	}
	
	var uid = e.target.getAttribute("data-story-uid");
	var target = e.target;

	while(!uid){
		target = target.parentNode;
		uid = target.getAttribute("data-story-uid");
	}

	var xhr = new XMLHttpRequest();
	var url = "/story/" + uid + "/delete";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function() {
		if(this.readyState === 4 && this.status === 200){
			showResponse("Story removed.");
			setTimeout("hideResponse()",2000);
			updateStoryList();
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("Unable to remove story.");
			setTimeout("hideResponse()",2000);
		}
	}
	xhr.send();
}

function linkListElement(e){
	var suid = e.target.getAttribute("data-story-uid");
	var target = e.target;
	
	//Go to parent node if needed.
	while(!suid){
		target = target.parentNode
		suid = target.getAttribute("data-story-uid");
	}
	
	location.href = "/story/" + suid;
}

function dropListElement(e){
	e.preventDefault();
	
	if(e.stopPropagation !== "undefined"){
		e.stopPropagation();
	}
	
	var firstID = parseInt(e.dataTransfer.getData("text"));
	var secondID = parseInt(e.target.getAttribute("data-story-uid"));
	
	var target = e.target;
	
	while(isNaN(secondID)){
		target = target.parentNode
		secondID = parseInt(target.getAttribute("data-story-uid"));
	}
	
	if(firstID !== secondID){
		moveStory(firstID, secondID);
	}
}

function dragListElement(e){
	var storyUID = e.target.getAttribute("data-story-uid");
	
	var target = e.target;
	
	while(storyUID === null){
		target = target.parentNode
		storyUID = parseInt(target.getAttribute("data-story-uid"));
	}
	
	e.dataTransfer.setData("text", storyUID);
}

function allowDragListElement(e){
	e.preventDefault();
}

function setMoveMode(){
	mode = parseInt(document.getElementById("move_mode").value);
	
	if (mode === 1){ //Move chapter mode
		document.getElementById("list_a_chapter").classList.add("meta_hidden");
		document.getElementById("list_b_chapter").classList.add("meta_hidden");
	} else if (mode === 2){ //Move section mode
		document.getElementById("list_a_chapter").classList.remove("meta_hidden");
		document.getElementById("list_b_chapter").classList.remove("meta_hidden");
	} else {
		console.log(mode);
	}
	
}

function setStory(id){
	var value = parseInt(document.getElementById("list_" + id + "_story").value);
	
	//Blank the list
	document.getElementById("list_" + id).innerHTML = "";
	
	if (value === -1){ //No story selected
		return;
	}
	
	if (mode === 1) { //Move chapters mode
		updateChapterList(id, value);
	} else if (mode === 2) { //move sections mode
		//blank list
		//update chapter select list
	}
}

function updateChapterList(idTag, idStory){
	var xhr = new XMLHttpRequest();
	var url = "/story/" + idStory + "/list";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		//if server returns JSON, update display
		if (this.readyState === 4 && this.status === 200){
			//get the char list
			var chapterList = document.getElementById("list_" + idTag);
			
			//blank the existing list
			chapterList.innerHTML = "";
			
			//convert json into object
			var chapterListJSON = JSON.parse(this.responseText);
			if(chapterListJSON.Names != null) {
				//add the chapters to the page
				for (var i = 0; i <= chapterListJSON.Names.length; i++) {
					if (i === chapterListJSON.Names.length){
						var chapterElem = document.createElement("div");
						chapterElem.className = "list_elem list_elem_ghost";
						chapterElem.setAttribute("data-story-uid", idStory);
						chapterElem.setAttribute("data-chapter-uid", i);
						chapterElem.setAttribute("draggable", "false");
						chapterElem.addEventListener("drop", dropListElement);
						chapterElem.addEventListener("dragover", allowDragListElement);
						chapterElem.addEventListener("dragenter", changeSelectedElementBG);
						chapterElem.addEventListener("dragleave", clearSelectedElementBG);
						
						chapterList.appendChild(chapterElem);
					} else {
						var chapterElem = document.createElement("div");
						chapterElem.className = "list_elem list_elem_color";
						chapterElem.setAttribute("data-story-uid", idStory);
						chapterElem.setAttribute("data-chapter-uid", chapterListJSON.UIDS[i]);
						chapterElem.setAttribute("draggable", "true");
						chapterElem.addEventListener("drop", dropListElement);
						chapterElem.addEventListener("dragover", allowDragListElement);
						chapterElem.addEventListener("dragstart", dragListElement);
						chapterElem.addEventListener("dragenter", changeSelectedElementBG);
						chapterElem.addEventListener("dragleave", clearSelectedElementBG);
						
						var chapterElemName = document.createElement("span");
						chapterElemName.innerHTML = chapterListJSON.Names[i];
						
						//Add to section elem
						chapterElem.appendChild(chapterElemName);
						
						chapterList.appendChild(chapterElem);
					}
				}
			} else { //If no chapters, just create empty element
				var chapterElem = document.createElement("div");
				chapterElem.className = "list_elem list_elem_ghost";
				chapterElem.setAttribute("data-story-uid", idStory);
				chapterElem.setAttribute("data-chapter-uid", 0);
				chapterElem.setAttribute("draggable", "false");
				chapterElem.addEventListener("drop", dropListElement);
				chapterElem.addEventListener("dragover", allowDragListElement);
				chapterElem.addEventListener("dragenter", changeSelectedElementBG);
				chapterElem.addEventListener("dragleave", clearSelectedElementBG);
				
				chapterList.appendChild(chapterElem);
			}
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error loading the chapter list. Status: " + this.status);
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

function dropListElement(e){
	e.preventDefault();
	
	if(e.stopPropagation !== "undefined"){
		e.stopPropagation();
	}
	
	e.target.style.background="none";
	
	var first = JSON.parse(e.dataTransfer.getData("text"));
	var secondCUID = parseInt(e.target.getAttribute("data-chapter-uid"));
	var secondSUID = parseInt(e.target.getAttribute("data-story-uid"));
	
	var target = e.target;
	
	while(isNaN(secondSUID)){
		target = target.parentNode
		secondCUID = parseInt(target.getAttribute("data-chapter-uid"));
		secondSUID = parseInt(target.getAttribute("data-story-uid"));
	}
	
	if(first.cuid !== secondCUID && first.suid !== secondSUID){
		moveChapter(first.suid, first.cuid, secondSUID, secondCUID);
	}
}

function dragListElement(e){
	var SUID = e.target.getAttribute("data-story-uid");
	var CUID = e.target.getAttribute("data-chapter-uid");
	
	var target = e.target;
	
	while(isNaN(SUID)){
		target = target.parentNode
		SUID = parseInt(target.getAttribute("data-story-uid"));
		CUID = parseInt(target.getAttribute("data-chapter-uid"));
	}
	
	e.dataTransfer.setData("text", JSON.stringify({suid: SUID, cuid: CUID}));
}

function allowDragListElement(e){
	e.preventDefault();
}

function changeSelectedElementBG(e){
	e.preventDefault();
	e.target.style.background="#DDEEDD";
}

function clearSelectedElementBG(e){
	e.preventDefault();
	e.target.style.background="transparent";
}

function moveChapter(storyFirst, chapterFirst, storySecond, chapterSecond){
	var xhr = new XMLHttpRequest();
	var url = "/move/chapter/inter/" + storyFirst + "/" + chapterFirst + "/" + storySecond + "/" + chapterSecond;
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		if (this.readyState === 4 && this.status === 200){
			updateChapterList("a",document.getElementById("list_a_story").value);
			updateChapterList("b",document.getElementById("list_b_story").value);
			showResponse("Chapter has been moved.");
			setTimeout("hideResponse()",2000);
		} else if(this.readyState === 4 && this.status !== 200){
			showResponse("There was an error moving the chapter.");
			setTimeout("hideResponse()",2000);
		}
	}
	
	xhr.send();
}

</script>

{{template "header"}}

<h1 class="name">Stories</h1>

<select id="move_mode" onchange="setMoveMode();">
	<option value="1">Move Chapters</option>
	<option value="2">Move Sections</option>
</select>

<div class="ui_grid_2">
<div class="list_wrapper">
	<div class="list_control">
		<select id="list_a_story" onchange='setStory("a");'>
			<option value="-1">Select a Story</option>
		</select>
		<select id="list_a_chapter" class="meta_hidden">
			<option value="-1">Select a Chapter</option>
		</select>
	</div>
	<div class="list" id="list_a">
		a
	</div>
</div>

<div class="list_wrapper">
	<div class="list_control">
		<select id="list_b_story" onchange='setStory("b");'>
			<option value="-1">Select a Story</option>
		</select>
		<select id="list_b_chapter" class="meta_hidden">
			<option value="-1">Select a Chapter</option>
		</select>
	</div>
	<div class="list" id="list_b">
	b
	</div>
</div>
</div>

</body>

</html>
