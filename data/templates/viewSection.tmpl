<html>

<head>
	<meta charset="utf-8">
	<title>View Section {{.Section.Name.PrimaryName}} | gopher-write</title>

	{{template "css"}}
</head>

<body>

{{template "js"}}

<script language="javascript">

var currentStoryUID = {{index .UIDS 0}};
var currentChapterUID = {{index .UIDS 1}};
var currentSectionUID = {{index .UIDS 2}};

var sectStatus = {{.Section.Status}};
var newStatus = null;

var changes = false;

var characters = {{.Section.Characters}};
var charactersToAdd = [];

var locations = {{.Section.Locations}};
var locationsToAdd = [];

window.onload = initPage;

function initPage(){
	//Set the sectStatus
	setStatus();
	
	PopulateCharacterList();
	
	//Update character list
	updateCharacterList();
	populateCharacterAddModal();
	
	//Save changes every 30 seconds
	window.setInterval(saveChanges, 30 * 1000);
}

function setStatus(){
	var statusText = document.getElementById("status_text");
	statusText.value = sectStatus;
}

function saveChanges(){
	//Only save changes if there is actually something to save.
	if(changes === true){
		//reset change sectStatus
		changes = false;
		
		var name = MakeName(document.getElementById("name_text").innerHTML,false,null);

		var text = document.getElementById("text_textarea").value;
		var stat = parseInt(document.getElementById("status_text").value);
		var section = MakeSection(name,stat,stat,characters);
		
		var xhr = new XMLHttpRequest();
		var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit";
		xhr.open("POST", url, true);
		xhr.setRequestHeader("Content-Type", "application/json");
		xhr.onreadystatechange = function () {
			//if server returns proper, update display
			if (this.readyState == 4 && this.status == 200){
				showResponse("Section updated.");
				setTimeout("hideResponse()",5000);
			} else if (this.readyState == 4 && this.status == 500) {
				showResponse("Unable to update.");
				setTimeout("hideResponse()",5000);
			}
		}
		
		xhr.send(JSON.stringify(section));
		
	}
}

function updateCharacterList(){

	if(CharacterList === null) {
		setTimeout(updateCharacterList,50);
	}

	
	//get the char list
	var characterList = document.getElementById("character_list");
	
	//blank the existing list
	characterList.innerHTML = "";
	
	for(var i=0; i < characters.length; i++){
		var currentChar = GetCharacter(characters[i]);
		
		//if character doesn't exist/was deleted
		if(currentChar === null){
			
		} else {
			//TODO: make popup w/ more info on hover
			var storyElem = document.createElement("div");
			storyElem.className = "aux_list_elem";
			
			var storyElemLink = document.createElement("span");
			storyElemLink.innerHTML = currentChar.name;
			
			storyElem.appendChild(storyElemLink);
			
			characterList.appendChild(storyElem);
		}
	}
}

function toggleCharacterVisability(){
	if(document.getElementById("character_list_control").style.display == "grid"){
		document.getElementById("character_list_control").style.display = "none";
		document.getElementById("character_list").style.display = "none";
	} else {
		document.getElementById("character_list_control").style.display = "grid";
		document.getElementById("character_list").style.display = "flex";
	}
}

function addToCharacters(e){

	if(e.stopPropagation !== "undefined"){
		e.stopPropagation();
	}

	var charuid = parseInt(e.target.getAttribute("data-character-uid"));
	var target = e.target;

	while(isNaN(charuid)){
		target = target.parentNode;
		charuid = parseInt(e.target.getAttribute("data-character-uid"));	
	}

	//Set page to look like added
	e.target.classList.add("ui_modal_list_elem_faded");
	e.target.removeEventListener("dblclick", addToCharacters);
	
	//Add local
	characters.push(charuid);

	//Update ui
	updateCharacterList();
	
	//Try to add remote
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit/addchar/" + charuid;
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "text/plain");
	xhr.onreadystatechange = function () {
		if (this.readyState == 4 && this.status === 200){
			showResponse("Character added to section.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			//If unable to add
			charactersToAdd.push(charuid); //Add to cache to try again on next save
			showResponse("Unable to add character to section. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send();
}

function populateCharacterAddModal(){

	if(CharacterList === null) {
		setTimeout(populateCharacterAddModal,50);
		return;
	}
	
	//get the char list
	var modalList = document.getElementById("character_modal_list");
	
	//blank the existing list
	modalList.innerHTML = "";
	
	//loop through all characters and populate modal
	for(var currentChar of CharacterList.values()){
		//TODO: make popup w/ more info on hover
		var storyElem = document.createElement("div");
		storyElem.className = "ui_modal_list_elem";
		storyElem.setAttribute("data-character-uid",currentChar.uid);
		
		//if char alread member
		if(characters.indexOf(currentChar.uid) === -1){
			storyElem.addEventListener("dblclick", addToCharacters);
		} else  {
			storyElem.classList.add("ui_modal_list_elem_faded")
		}
		
		var storyElemLink = document.createElement("span");
		storyElemLink.innerHTML = currentChar.name;
		
		storyElem.appendChild(storyElemLink);
		
		modalList.appendChild(storyElem);
		
	}
}

function updateStatus(){

	var stat = parseInt(document.getElementById("status_text").value);

	//Try to add remote
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit/status/" + stat;
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "text/plain");
	xhr.onreadystatechange = function () {
		if (this.readyState == 4 && this.status === 200){
			showResponse("Status updated.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			//If unable to add
			newStatus = stat; //Add to cache to try again on next save
			showResponse("Unable to update status. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send();
}

</script>

{{template "header"}}

<h1 id="name_text">{{.Section.Name.PrimaryName}}</h1>

<div class="meta_control">
	<a href="/story/{{index .UIDS 0}}/{{index .UIDS 1}}">Return to chapter </a>
</div>

<div class="status_wrap" id="status_wrap">
	<span class="status_label" >Status: </span>
	<select class="status_text" id="status_text" onchange="updateStatus();" >
		<option value="0">Not Started</option>
		<option value="1">In Progress</option>
		<option value="2">Almost Done</option>
		<option value="3">Done</option>
		<option value="4">Unknown</option>
	</select>
</div>

<div class="text_wrap" id="text_wrap">
	<div class="text_control" id="text_control">
		<span class="button_control" onclick="saveChanges();">Save</span>
	</div>
	<textarea id="text_textarea" onchange="changes=true;">{{.Section.Text}}</textarea>
</div>

<div class="ui_grid_3">
<div class="aux_list_wrap">
	<div class="aux_list_header" onclick="toggleCharacterVisability()">
		<h3>Characters</h3>
		<div class="aux_list_control" id="character_list_control">
			<span id="character_list_control_add" class="form_make_button" onclick='NoProp(event); DisplayModal("character_modal");'>Add Character</span>	
		</div>
	</div>
	<br>
	<div class="aux_list" id="character_list">
	
	</div>
</div>

<div class="aux_list_wrap">
	<div class="aux_list_header" onclick="">
		<h3>Locations</h3>
	</div>
</div>

<div class="aux_list_wrap">
	<div class="aux_list_header" onclick="">
		<h3>Notes</h3>
	</div>
</div>
</div>



<div class="ui_modal" id="character_modal">
<div class="ui_modal_content">
	<div class="ui_modal_list" id="character_modal_list">
		
	</div>
	<br>
	<div class="ui_modal_control">
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='HideModal("character_modal")'>Close</span>
	</div>
</div>
</div>

</body>

</html>
