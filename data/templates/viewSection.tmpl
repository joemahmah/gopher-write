<html>

<head>
	<meta charset="utf-8">
	<title>View Section {{.Section.Name.PrimaryName}} | gopher-write</title>

	{{template "css"}}
</head>

<body>

{{template "js"}}

<script language="javascript">

var currentStoryUID = {{index .UIDS 0}};
var currentChapterUID = {{index .UIDS 1}};
var currentSectionUID = {{index .UIDS 2}};

var newStatus = null;
var textChanged = false;
var noteChanged = false;
var nameChanged = false;

var characters = {{.Section.Characters}};
var charactersToAdd = [];

var locations = {{.Section.Locations}};
var locationsToAdd = [];

window.onload = initPage;

function initPage(){
	//Set the status
	var statusText = document.getElementById("status_text");
	statusText.value = {{.Section.Status}};

	//Populate the js character list
	PopulateCharacterList();
	
	//Update character list
	updateCharacterList();
	populateCharacterAddModal();
	
	//Save changes every 30 seconds
	window.setInterval(saveChanges, 30 * 1000);
}


function saveChanges(){
	//Update characters if needed
	if(charactersToAdd.length > 0){
		for(var character of charactersToAdd){
			addToCharacters(character);
		}
	}
	
	//Update status if needed
	if(newStatus !== null){
		updateStatus(newStatus);
	}

	//Update text if needed.
	if(textChanged){
		updateText()
	}
	
	//Update note if needed.
	if(noteChanged){
		updateNote()
	}
	
	//Update name if needed.
	if(nameChanged){
		updateName()
	}
}

function updateCharacterList(){

	if(CharacterList === null) {
		setTimeout(updateCharacterList,50);
	}

	
	//get the char list
	var characterList = document.getElementById("character_list");
	
	//blank the existing list
	characterList.innerHTML = "";
	
	for(var i=0; i < characters.length; i++){
		var currentChar = GetCharacter(characters[i]);
		
		//if character doesn't exist/was deleted
		if(currentChar === null){
			
		} else {
		
			//Make containing node
			var charElem = document.createElement("div");
			charElem.classList.add("aux_list_elem");
			charElem.setAttribute("data-char-uid", currentChar.uid)
			
			//Get name
			var charElemName = document.createElement("span");
			charElemName.innerHTML = currentChar.name;
			
			//Control buttons
			var charElemControl = document.createElement("div");
			charElemControl.classList.add("list_elem_btn_wrap");
			
			var charElemRemove = document.createElement("span");
			charElemRemove.classList.add("list_elem_btn");
			charElemRemove.innerHTML = "X";
			charElemRemove.addEventListener("click",removeCharacter);
			
			var charElemLink = document.createElement("span");
			charElemLink.classList.add("list_elem_btn");
			charElemLink.innerHTML = "âŽ˜";
			charElemLink.addEventListener("click",linkCharacter);
			
			charElemControl.appendChild(charElemLink);
			charElemControl.appendChild(charElemRemove);
			
			//Add name and buttons
			charElem.appendChild(charElemName);
			charElem.appendChild(charElemControl)
			
			characterList.appendChild(charElem);
		}
	}
}

function toggleCharacterVisability(){
	if(document.getElementById("character_list_control").style.display == "inline-block"){
		document.getElementById("character_list_control").style.display = "none";
		document.getElementById("character_list").style.display = "none";
	} else {
		document.getElementById("character_list_control").style.display = "inline-block";
		document.getElementById("character_list").style.display = "flex";
	}
}

function toggleLocationVisability(){
	if(document.getElementById("location_list_control").style.display == "inline-block"){
		document.getElementById("location_list_control").style.display = "none";
		document.getElementById("location_list").style.display = "none";
	} else {
		document.getElementById("location_list_control").style.display = "inline-block";
		document.getElementById("location_list").style.display = "flex";
	}
}

function toggleNoteVisability(){
	if(document.getElementById("note_wrap").style.display == "block"){
		document.getElementById("note_wrap").style.display = "none";
	} else {
		document.getElementById("note_wrap").style.display = "block";
	}
}

function procAddToCharacters(e){

	if(e.stopPropagation !== "undefined"){
		e.stopPropagation();
	}

	var charuid = parseInt(e.target.getAttribute("data-character-uid"));
	var target = e.target;

	while(isNaN(charuid)){
		target = target.parentNode;
		charuid = parseInt(e.target.getAttribute("data-character-uid"));	
	}

	//Set page to look like added
	e.target.classList.add("ui_modal_list_elem_faded");
	e.target.removeEventListener("dblclick", procAddToCharacters);
	
	//Add local
	characters.push(charuid);

	//Update ui
	updateCharacterList();
	
	addToCharacters(charuid);
}

function populateCharacterAddModal(){

	if(CharacterList === null) {
		setTimeout(populateCharacterAddModal,50);
		return;
	}
	
	//get the char list
	var modalList = document.getElementById("character_modal_list");
	
	//blank the existing list
	modalList.innerHTML = "";
	
	//loop through all characters and populate modal
	for(var currentChar of CharacterList.values()){
		//TODO: make popup w/ more info on hover
		var storyElem = document.createElement("div");
		storyElem.className = "ui_modal_list_elem";
		storyElem.setAttribute("data-character-uid",currentChar.uid);
		
		//if char alread member
		if(characters.indexOf(currentChar.uid) === -1){
			storyElem.addEventListener("dblclick", procAddToCharacters);
		} else  {
			storyElem.classList.add("ui_modal_list_elem_faded")
		}
		
		var storyElemLink = document.createElement("span");
		storyElemLink.innerHTML = currentChar.name;
		
		storyElem.appendChild(storyElemLink);
		
		modalList.appendChild(storyElem);
		
	}
}

function procUpdateStatus(){

	var stat = parseInt(document.getElementById("status_text").value);

	updateStatus(stat);
}


function removeCharacter(e){

}

function linkCharacter(e){

}

////////////////////////////
// Actual Update Handlers //
////////////////////////////

function updateStatus(stat){

	//Try to add remote
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit/status/" + stat;
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "text/plain");
	xhr.onreadystatechange = function () {
		if (this.readyState == 4 && this.status === 200){
			newStatus = null; //unflag to be updated (if flagged)
			showResponse("Status updated.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			//If unable to add
			newStatus = stat; //Flag to try again on next save
			showResponse("Unable to update status. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send();
}

//TODO: change to accept and send array
function addToCharacters(charuid){
	//Try to add remote
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit/addchar/" + charuid;
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "text/plain");
	xhr.onreadystatechange = function () {
		if (this.readyState == 4 && this.status === 200){
			if(charactersToAdd.includes(charuid)){ //If char alread queued to be added
				var index = charactersToAdd.indexOf(charuid);
				charactersToAdd.splice(charuid, 1); //unflag to try again on next save
			}
			showResponse("Character added to section.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			//If unable to add
			if(!charactersToAdd.includes(charuid)){ //If char not alread queued to be added
				charactersToAdd.push(charuid); //Flag to try again on next save
			}
			showResponse("Unable to add character to section. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send();
}

function updateText() {
	var text = document.getElementById("text_textarea").value;
	var textobj = {Data: text};
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit/text";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			textChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			textChanged = true; //
			showResponse("Unable to save text. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send(JSON.stringify(textobj));
}

function updateNote() {
	var text = document.getElementById("note_textarea").value;
	var textobj = {Data: text};
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit/note";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			noteChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			noteChanged = true; //
			showResponse("Unable to save note. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send(JSON.stringify(textobj));
}

function updateName(){
	var name = MakeName(document.getElementById("name_text").value,false,null);
	
	var xhr = new XMLHttpRequest();
	var url = "/story/" + currentStoryUID + "/" + currentChapterUID + "/" + currentSectionUID + "/edit/name";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		//if server returns proper, update display
		if (this.readyState == 4 && this.status == 200){
			nameChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()",2000);
		} else if (this.readyState == 4 && this.status !== 200) {
			nameChanged = true; //
			showResponse("Unable to save name. Will try again on next save.");
			setTimeout("hideResponse()",5000);
		}
	}
	
	xhr.send(JSON.stringify(name));
}

</script>

{{template "header"}}

<input class="name" id="name_text" type="text" onchange="nameChanged=true;" onkeypress="ConsumeEnterKeyEvent(event, saveChanges);" value="{{.Section.Name.PrimaryName}}">

<div class="meta_control">
	<a href="/story/{{index .UIDS 0}}/{{index .UIDS 1}}">Return to chapter </a>
</div>

<div class="status_wrap" id="status_wrap">
	<span class="status_label" >Status: </span>
	<select class="status_text" id="status_text" onchange="procUpdateStatus();" >
		<option value="0">Not Started</option>
		<option value="1">In Progress</option>
		<option value="2">Almost Done</option>
		<option value="3">Done</option>
		<option value="4">Unknown</option>
	</select>
</div>

<div class="text_wrap" id="text_wrap">
	<div class="text_control" id="text_control">
		<span class="button_control" onclick="saveChanges();">Save</span>
	</div>
	<textarea id="text_textarea" onchange="textChanged=true;">{{.Section.Text}}</textarea>
</div>

<div class="ui_grid_3">
<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleCharacterVisability()">
		<h3>Characters</h3>
		<div class="aux_list_control" id="character_list_control">
			<span id="character_list_control_add" class="form_make_button form_make_button_round" onclick='NoProp(event); DisplayModal("character_modal");'>
				<span class="meta_bold meta_big">+</span>
				<span class="meta_small meta_valign">Add Character</span>
			</span>	
		</div>
	</div>
	<br>
	<div class="aux_list" id="character_list">
	
	</div>
</div>

<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleLocationVisability()">
		<h3>Locations</h3>
	</div>
	<br>
	<div class="aux_list" id="location_list">
	
	</div>
</div>

<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleNoteVisability()">
		<h3>Notes</h3>
	</div>
	<br>
	<div class="aux_text_wrap" id="note_wrap">
		<textarea id="note_textarea" onchange="noteChanged=true;">{{.Section.Note}}</textarea>
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
	</div>
</div>
</div>



<div class="ui_modal" id="character_modal">
<div class="ui_modal_content">
	<div class="ui_modal_list" id="character_modal_list">
		
	</div>
	<br>
	<div class="ui_modal_control">
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='HideModal("character_modal")'>Close</span>
	</div>
</div>
</div>

</body>

</html>
