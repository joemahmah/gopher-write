<html>

<head>
	<meta charset="utf-8">
	<title>View Character {{.Name.PrimaryName}} | gopher-write</title>

	{{template "css"}}
</head>

<body>
	
{{template "js"}}
	
<script language="javascript">

var currentCharUID = {{.UID}};
var descriptionChanged = false;
var roleChanged = false;
var motivationChanged = false;
var goalChanged = false;
var nameChanged = false;
var ageChanged = false;
var character;

window.onload = initPage;

function initPage(){
	//Get the aliases
	updateAliasList();

	//Save changes every 30 seconds
	window.setInterval(saveChanges, 30 * 1000);
}

//Have ConsumeEnterKeyEvent hook this function
//to allow enter to save changes.
function NewEnterKeyEvent(){
	saveChanges();
}

function addChronoAgeInput(){
	var chronoAgeInput = document.createElement("input");
	chronoAgeInput.id = "age_chrono_text";
	chronoAgeInput.type = "number";
	chronoAgeInput.className = "age_text";
	chronoAgeInput.value = document.getElementById("age_bio_text").value;
	chronoAgeInput.onchange = function(){ageChanged=true; saveChanges();};
	
	//Target insert location
	var chronoAgeTarget = document.getElementById("age_chrono_target");
	
	chronoAgeTarget.parentNode.insertBefore(chronoAgeInput, chronoAgeTarget); //add actual input box
	
	//Change label
	document.getElementById("age_label").innerHTML = "Biological Age || Chronological age";
	
	//clear target location
	chronoAgeTarget.innerHTML = "";
	chronoAgeTarget.classList.remove("form_make_button");
}

function saveChanges(){
	
	if(descriptionChanged){
		updateDescription();
	}
	
	if(roleChanged){
		updateRole();
	}

	if(goalChanged){
		updateGoal();
	}

	if(motivationChanged){
		updateMotivation();
	}

	if(nameChanged){
		updateName();
	}
	
	if(ageChanged){
		updateAge();
	}
}

function toggleRoleVisability(){
	if(document.getElementById("role_wrap").style.display == "block"){
		document.getElementById("role_wrap").style.display = "none";
	} else {
		document.getElementById("role_wrap").style.display = "block";
	}
}

function toggleGoalVisability(){
	if(document.getElementById("goal_wrap").style.display == "block"){
		document.getElementById("goal_wrap").style.display = "none";
	} else {
		document.getElementById("goal_wrap").style.display = "block";
	}
}

function toggleMotivationVisability(){
	if(document.getElementById("motivation_wrap").style.display == "block"){
		document.getElementById("motivation_wrap").style.display = "none";
	} else {
		document.getElementById("motivation_wrap").style.display = "block";
	}
}

function updateAliasList(){
	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/aliaslist";
	xhr.open("POST", url, true);
	xhr.onreadystatechange = function () {
		//if server returns JSON, update display
		if (this.readyState === 4 && this.status === 200){
			//get the alias list
			var aliasList = document.getElementById("alias_list");
			
			//Clear the alias list
			aliasList.innerHTML = "";
			
			//convert json into object
			var aliasListJSON = JSON.parse(this.responseText);
			
			if(aliasListJSON.Data != null) {
				
				var data = aliasListJSON.Data;
			
				//add the stories to the page
				for (var i = 0; i < data.length; i++) {
					var aliasElem = document.createElement("div");
					aliasElem.classList.add("list_elem");
					aliasElem.classList.add("meta_height_40px");
					aliasElem.setAttribute("data-alias-uid",data[i].I);
					
					//Get Primary Name
					var aliasElemName = document.createElement("span");
					aliasElemName.innerHTML = data[i].Name.PrimaryName;
					
					//Get auxilary names
					//TODO
					
					//Control buttons
					var aliasElemControl = document.createElement("div");
					aliasElemControl.classList.add("list_elem_btn_wrap");
					
					var aliasElemRemove = document.createElement("span");
					aliasElemRemove.classList.add("list_elem_btn");
					aliasElemRemove.classList.add("list_elem_btn_red");
					aliasElemRemove.innerHTML = "X";
					aliasElemRemove.addEventListener("click",removeAlias);
					
					var aliasElemEdit = document.createElement("span");
					aliasElemEdit.classList.add("list_elem_btn");
					aliasElemEdit.innerHTML = "✏";
					aliasElemEdit.addEventListener("click",editAlias);
					
					aliasElemControl.appendChild(aliasElemEdit);
					aliasElemControl.appendChild(aliasElemRemove);
					
					//Add name and buttons
					aliasElem.appendChild(aliasElemName);
					aliasElem.appendChild(aliasElemControl)
					
					aliasList.appendChild(aliasElem);
				}
			}
			
		}
	}
	
	xhr.send();
}

function removeAlias(e){
	//Get the alias UID stored in the list element (grandparent) node
	var aliasUID = parseInt(e.target.parentNode.parentNode.getAttribute("data-alias-uid"));
	
	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/removealias";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			updateAliasList();
			showResponse("Alias removed.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to remove alias.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify({Data: aliasUID}));
}

function editAlias(e){
	alert("TODO");
}

//////////////////////
// Update Functions //
//////////////////////

function updateAge(){
	//Get the chrono age (and set to null if not exists)
	var chronoAgeInput = document.getElementById("age_chrono_text");
	var chronoAge = null;
	if(chronoAgeInput){
		chronoAge = parseInt(chronoAgeInput.value);
	}
	
	//Make the age
	var age = MakeAge(parseInt(document.getElementById("age_bio_text").value), chronoAge);
	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/age";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			ageChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update age. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(age));
}

function updateName(){
	var name = MakeName(document.getElementById("name_text").value,false,null);
	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/name";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			nameChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update name. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(name));
}

function updateDescription(){
	var text = document.getElementById("text_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/description";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			descriptionChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update description. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

function updateRole(){
	var text = document.getElementById("role_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/role";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			roleChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update role. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

function updateGoal(){
	var text = document.getElementById("goal_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/goal";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			goalChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update goal. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

function updateMotivation(){
	var text = document.getElementById("motivation_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/motivation";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			motivationChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update motivation. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

function addAlias(){
	//Get the primary name for the alias
	var primaryName = document.getElementById("alias_input").value;
	var alternateNames = [];
	
	//Get all alternate names for the alias
	for(var name of document.getElementById("alias_alt_list").getElementsByClassName("alias_alt")){
		alternateNames.push(name.value);
	}
	
	//Make a name object
	var name = MakeName(primaryName, true, alternateNames);
	
	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/addalias";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
			
			//update alias list
			updateAliasList();
			
			//Clear add alias form
			document.getElementById("alias_input").value = "";
			document.getElementById("alias_alt_list").innerHTML = "";
			
			//Close the modal
			HideModal("alias_modal")
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to add alias.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(name));
}


//Adds an alternate name field to the form
function addAltNameAlias(){
	var altNameList = document.getElementById("alias_alt_list");
	
	var newAltName = document.createElement("input");
	newAltName.classList.add("alias_alt");
	
	altNameList.appendChild(newAltName);
}

//Adds an alternate name field to the form
function removeAltNameAlias(){
	var altNameList = document.getElementById("alias_alt_list");
	var altNames = altNameList.getElementsByClassName("alias_alt")
	
	//If not exist, no need to remove
	if(altNames.length == 0){
		return;
	}
	
	var lastAltName = altNames[altNames.length - 1]; //Get last alt name input
	
	altNameList.removeChild(lastAltName);
}


</script>
	
{{template "header"}}

<input class="name" id="name_text" type="text" onkeypress="nameChanged=true; ConsumeEnterKeyEvent(event);" value="{{.Name.PrimaryName}}">
<div class="meta_control">
	<a href="/char">Return to character list </a>
</div>

<div class="profile" id="profile">
	<div class="age_wrap" id="age_wrap">
		{{if ageEq .}}
			<span class="age_label" id="age_label">Age</span><br>
			<input type="number" class="age_text" id="age_bio_text" value="{{.Age.BioAge}}" onchange="ageChanged=true; saveChanges();"></input>
		{{else}}
			<span class="age_label" id="age_label">Biological Age (Chronological age)</span><br>
			<input type="number" class="age_text" id="age_bio_text" value="{{.Age.BioAge}}" onchange="ageChanged=true; saveChanges();"></input> (
		{{end}}
		
		{{if ageEq .}}
			<span type="number" class="form_make_button" id="age_chrono_target" onclick="addChronoAgeInput();" > Split Age</span><br>
		{{else}}
			<input type="number" class="age_text" id="age_chrono_text" value="{{.Age.ChronoAge}}" onchange="ageChanged=true; saveChanges();"></input> )<br>
		{{end}}
	</div>
</div>

<div class="text_wrap" id="text_wrap">
	<div class="text_control" id="text_control">
		<span class="button_control" onclick="saveChanges();">Save</span>
	</div>
	<textarea id="text_textarea" onchange="descriptionChanged=true;">{{.Description}}</textarea>
</div>

<div class="ui_grid_3">
<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleRoleVisability()">
		<h3>Role</h3>
	</div>
	<br>
	<div class="aux_text_wrap" id="role_wrap">
		<textarea id="role_textarea" onchange="roleChanged=true;">{{.Role}}</textarea>
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
	</div>
</div>

<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleGoalVisability()">
		<h3>Goal</h3>
	</div>
	<br>
	<div class="aux_text_wrap" id="goal_wrap">
		<textarea id="goal_textarea" onchange="goalChanged=true;">{{.Goal}}</textarea>
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
	</div>
</div>

<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleMotivationVisability()">
		<h3>Motivation</h3>
	</div>
	<br>
	<div class="aux_text_wrap" id="motivation_wrap">
		<textarea id="motivation_textarea" onchange="motivationChanged=true;">{{.Motivation}}</textarea>
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
	</div>
</div>
</div>

<h3 class="subheader meta_mouse_hand" onclick='DisplayModal("alias_modal");'>Aliases <span>+</span></h3>
<div class="list" id="alias_list">
	
</div>


<div class="ui_modal" id="alias_modal">
<div class="ui_modal_content">
	<div class="ui_modal_form_small">
		<label>Alias: </label>
		<input id="alias_input" type="text">
		<br>
		
		<label>Alternate Names (Nicknames, Name Fragments)</label>
		<span class="form_make_button form_make_button_round" onclick="addAltNameAlias();">Add</span>
		<span class="form_make_button form_make_button_round" onclick="removeAltNameAlias();">Remove</span>
		<hr>
		<div id="alias_alt_list" class="ui_modal_form_list">
			
		</div>
	</div>
	<br>
	<div class="ui_modal_control">
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='NoProp(event); addAlias();'>Add Alias</span>
			<span class="form_make_button form_make_button_big form_make_button_round form_make_button_right" onclick='NoProp(event); HideModal("alias_modal")'>Close</span>
	</div>
</div>
</div>

</body>

</html>
