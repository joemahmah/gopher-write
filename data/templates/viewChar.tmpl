<html>

<head>
	<meta charset="utf-8">
	<title>View Character {{.Name.PrimaryName}} | gopher-write</title>

	{{template "css"}}
</head>

<body>
	
{{template "js"}}
	
<script language="javascript">

var currentCharUID = {{.UID}};
var descriptionChanged = false;
var roleChanged = false;
var motivationChanged = false;
var goalChanged = false;
var nameChanged = false;
var character;

window.onload = initPage;

function initPage(){
	//Save changes every 30 seconds
	window.setInterval(saveChanges, 30 * 1000);
}

//Have ConsumeEnterKeyEvent hook this function
//to allow enter to save changes.
function NewEnterKeyEvent(){
	saveChanges();
}

function addChronoAgeInput(){
	var chronoAgeInput = document.createElement("input");
	chronoAgeInput.id = "age_chrono_text";
	chronoAgeInput.type = "number";
	chronoAgeInput.className = "age_text";
	chronoAgeInput.value = document.getElementById("age_bio_text").value;
	chronoAgeInput.onchange = function(){changes=true;};
	
	//Target insert location
	var chronoAgeTarget = document.getElementById("age_chrono_target");
	
	chronoAgeTarget.parentNode.insertBefore(chronoAgeInput, chronoAgeTarget); //add actual input box
	
	//Change label
	document.getElementById("age_label").innerHTML = "Biological Age || Chronological age";
	
	//clear target location
	chronoAgeTarget.innerHTML = "";
	chronoAgeTarget.classList.remove("form_make_button");
}

function saveChanges(){
	
	if(descriptionChanged){
		updateDescription();
	}
	
	if(roleChanged){
		updateRole();
	}

	if(goalChanged){
		updateGoal();
	}

	if(motivationChanged){
		updateMotivation();
	}

	if(nameChanged){
		updateName();
	}
}

function toggleRoleVisability(){
	if(document.getElementById("role_wrap").style.display == "block"){
		document.getElementById("role_wrap").style.display = "none";
	} else {
		document.getElementById("role_wrap").style.display = "block";
	}
}

function toggleGoalVisability(){
	if(document.getElementById("goal_wrap").style.display == "block"){
		document.getElementById("goal_wrap").style.display = "none";
	} else {
		document.getElementById("goal_wrap").style.display = "block";
	}
}

function toggleMotivationVisability(){
	if(document.getElementById("motivation_wrap").style.display == "block"){
		document.getElementById("motivation_wrap").style.display = "none";
	} else {
		document.getElementById("motivation_wrap").style.display = "block";
	}
}

//////////////////////
// Update Functions //
//////////////////////

function updateAge(){
	var age = MakeAge(document.getElementById("age_bio_text").value,document.getElementById("age_chrono_text").value);
	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/age";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			nameChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update age. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(age));
}

function updateName(){
	var name = MakeName(document.getElementById("name_text").value,false,null);
	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/name";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			nameChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update name. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(name));
}

function updateDescription(){
	var text = document.getElementById("text_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/description";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			descriptionChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update description. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

function updateRole(){
	var text = document.getElementById("role_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/role";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			roleChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update role. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

function updateGoal(){
	var text = document.getElementById("goal_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/goal";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			goalChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update goal. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

function updateMotivation(){
	var text = document.getElementById("motivation_textarea").value;
	var textObj = {Data: text};

	var xhr = new XMLHttpRequest();
	var url = "/char/" + currentCharUID + "/edit/motivation";
	xhr.open("POST", url, true);
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onreadystatechange = function () {
		if(this.readyState === 4 && this.status === 200){
			motivationChanged = false;
			showResponse("Saved.");
			setTimeout("hideResponse()", 2000);
		} else if (this.readyState === 4 && this.status !== 200){
			showResponse("Unable to update motivation. Will try again on the next save.");
			setTimeout("hideResponse()", 2000);
		}
	}
	xhr.send(JSON.stringify(textObj));
}

</script>
	
{{template "header"}}

<input class="name" id="name_text" type="text" onchange="nameChanged=true;" onkeypress="ConsumeEnterKeyEvent(event);" value="{{.Name.PrimaryName}}">
<div class="meta_control">
	<a href="/char">Return to character list </a>
</div>

<div class="profile" id="profile">

	<div class="age_wrap" id="age_wrap">
		{{if ageEq .}}
			<span class="age_label" id="age_label">Age</span><br>
			<input type="number" class="age_text" id="age_bio_text" value="{{.Age.BioAge}}" onchange="changes=true;"></input>
		{{else}}
			<span class="age_label" id="age_label">Biological Age (Chronological age)</span><br>
			<input type="number" class="age_text" id="age_bio_text" value="{{.Age.BioAge}}" onchange="changes=true;"></input> (
		{{end}}
		
		{{if ageEq .}}
			<span type="number" class="form_make_button" id="age_chrono_target" onclick="addChronoAgeInput();" > Split Age</span><br>
		{{else}}
			<input type="number" class="age_text" id="age_chrono_text" value="{{.Age.ChronoAge}}" onchange="changes=true;"></input> )<br>
		{{end}}
	</div>
	
	<!--
	<div class="status_wrap" id="status_wrap">
		<span class="status_label" >Status: </span>
		<select class="status_text" id="status_text" onchange="changes=true;" >
			<option value="0">Not Started</option>
			<option value="1">In Progress</option>
			<option value="2">Almost Done</option>
			<option value="3">Done</option>
			<option value="4">Unknown</option>
		</select>
	</div>
	-->

</div>

<div class="text_wrap" id="text_wrap">
	<div class="text_control" id="text_control">
		<span class="button_control" onclick="saveChanges();">Save</span>
	</div>
	<textarea id="text_textarea" onchange="descriptionChanged=true;">{{.Description}}</textarea>
</div>

<div class="ui_grid_3">
<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleRoleVisability()">
		<h3>Role</h3>
	</div>
	<br>
	<div class="aux_text_wrap" id="role_wrap">
		<textarea id="role_textarea" onchange="roleChanged=true;">{{.Role}}</textarea>
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
	</div>
</div>

<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleGoalVisability()">
		<h3>Goal</h3>
	</div>
	<br>
	<div class="aux_text_wrap" id="goal_wrap">
		<textarea id="goal_textarea" onchange="goalChanged=true;">{{.Goal}}</textarea>
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
	</div>
</div>

<div class="aux_list_wrap meta_noselect">
	<div class="aux_list_header" onclick="toggleMotivationVisability()">
		<h3>Motivation</h3>
	</div>
	<br>
	<div class="aux_text_wrap" id="motivation_wrap">
		<textarea id="motivation_textarea" onchange="motivationChanged=true;">{{.Motivation}}</textarea>
		<div class="text_control" id="text_control">
			<span class="button_control" onclick="saveChanges();">Save</span>
		</div>
	</div>
</div>
</div>

<h3>Aliases</h3>
{{range .Aliases}}
	<p>{{.PrimaryName}}</p>
{{end}}
	
	
</body>

</html>
